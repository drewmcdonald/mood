create table "public"."moods" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid,
    "mood" character varying not null
);


alter table "public"."moods" enable row level security;

CREATE UNIQUE INDEX moods_pkey ON public.moods USING btree (id);

alter table "public"."moods" add constraint "moods_pkey" PRIMARY KEY using index "moods_pkey";

alter table "public"."moods" add constraint "moods_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."moods" validate constraint "moods_user_id_fkey";

grant delete on table "public"."moods" to "anon";

grant insert on table "public"."moods" to "anon";

grant references on table "public"."moods" to "anon";

grant select on table "public"."moods" to "anon";

grant trigger on table "public"."moods" to "anon";

grant truncate on table "public"."moods" to "anon";

grant update on table "public"."moods" to "anon";

grant delete on table "public"."moods" to "authenticated";

grant insert on table "public"."moods" to "authenticated";

grant references on table "public"."moods" to "authenticated";

grant select on table "public"."moods" to "authenticated";

grant trigger on table "public"."moods" to "authenticated";

grant truncate on table "public"."moods" to "authenticated";

grant update on table "public"."moods" to "authenticated";

grant delete on table "public"."moods" to "service_role";

grant insert on table "public"."moods" to "service_role";

grant references on table "public"."moods" to "service_role";

grant select on table "public"."moods" to "service_role";

grant trigger on table "public"."moods" to "service_role";

grant truncate on table "public"."moods" to "service_role";

grant update on table "public"."moods" to "service_role";

create policy "Enable read access for owning user"
on "public"."moods"
as permissive
for select
to authenticated
using ((auth.uid() = user_id));


create policy "Insert for self"
on "public"."moods"
as permissive
for insert
to public
with check ((auth.uid() = user_id));




